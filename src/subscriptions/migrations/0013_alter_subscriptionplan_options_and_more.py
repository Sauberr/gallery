# Generated by Django 5.0 on 2025-07-10 20:51

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("subscriptions", "0012_usersubscription_expiration_date"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="subscriptionplan",
            options={
                "ordering": ["cost", "name"],
                "verbose_name": "Subscription Plan",
                "verbose_name_plural": "Subscription Plans",
            },
        ),
        migrations.AddField(
            model_name="usersubscription",
            name="expiration_notification_sent",
            field=models.BooleanField(
                default=False,
                help_text="Indicates if an expiration notification has been sent",
                verbose_name="expiration notification sent",
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionplan",
            name="cost",
            field=models.DecimalField(
                decimal_places=2,
                help_text="Cost of the subscription plan in USD",
                max_digits=10,
                validators=[django.core.validators.MinValueValidator(0.0)],
                verbose_name="cost",
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionplan",
            name="description",
            field=models.TextField(
                blank=True,
                help_text="Description of the subscription plan",
                max_length=1024,
                null=True,
                verbose_name="description",
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionplan",
            name="has_binary_link",
            field=models.BooleanField(
                default=False,
                help_text="Indicates if the plan includes a binary link to the photo",
                verbose_name="has binary link",
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionplan",
            name="has_original_photo",
            field=models.BooleanField(
                default=False,
                help_text="Indicates if the plan includes an original photo",
                verbose_name="has original photo",
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionplan",
            name="has_thumbnail_200px",
            field=models.BooleanField(
                default=True,
                help_text="Indicates if the plan includes a 200px thumbnail",
                verbose_name="has thumbnail 200px",
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionplan",
            name="has_thumbnail_400px",
            field=models.BooleanField(
                default=False,
                help_text="Indicates if the plan includes a 400px thumbnail",
                verbose_name="has thumbnail 400px",
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionplan",
            name="name",
            field=models.CharField(
                help_text="Name of the subscription plan",
                max_length=255,
                unique=True,
                verbose_name="name",
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionplan",
            name="paypal_plan_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the PayPal subscription plan",
                max_length=300,
                null=True,
                unique=True,
                verbose_name="paypal plan id",
            ),
        ),
        migrations.AlterField(
            model_name="usersubscription",
            name="create_datetime",
            field=models.DateTimeField(
                auto_now_add=True,
                help_text="Timestamp when the subscription was created",
                verbose_name="create datetime",
            ),
        ),
        migrations.AlterField(
            model_name="usersubscription",
            name="expiration_date",
            field=models.DateTimeField(
                blank=True,
                help_text="Date when the subscription expires, if applicable",
                null=True,
                verbose_name="expiration date",
            ),
        ),
        migrations.AlterField(
            model_name="usersubscription",
            name="is_active",
            field=models.BooleanField(
                default=False,
                help_text="Indicates if the subscription is currently active",
                verbose_name="is active",
            ),
        ),
        migrations.AlterField(
            model_name="usersubscription",
            name="last_update",
            field=models.DateTimeField(
                auto_now=True,
                help_text="Timestamp when the subscription was last updated",
                verbose_name="last update",
            ),
        ),
        migrations.AlterField(
            model_name="usersubscription",
            name="paypal_subscription_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the PayPal subscription",
                max_length=300,
                null=True,
                verbose_name="paypal subscription id",
            ),
        ),
        migrations.AlterField(
            model_name="usersubscription",
            name="plan",
            field=models.ForeignKey(
                help_text="Subscription plan selected by the user",
                on_delete=django.db.models.deletion.PROTECT,
                to="subscriptions.subscriptionplan",
                verbose_name="subscription plan",
            ),
        ),
        migrations.AlterField(
            model_name="usersubscription",
            name="user",
            field=models.OneToOneField(
                help_text="User associated with the subscription",
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.AddIndex(
            model_name="usersubscription",
            index=models.Index(fields=["user"], name="subscriptio_user_id_9f012f_idx"),
        ),
        migrations.AddIndex(
            model_name="usersubscription",
            index=models.Index(fields=["plan"], name="subscriptio_plan_id_7a70a1_idx"),
        ),
        migrations.AddIndex(
            model_name="usersubscription",
            index=models.Index(fields=["is_active"], name="subscriptio_is_acti_9ca025_idx"),
        ),
    ]
