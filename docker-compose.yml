version: "3"

services:
  backend:
    build: ./
    container_name: assignment_container
    working_dir: /assignment
    command:
      - ./commands/start_server_${MODE}.sh
    ports:
        - ${LOCAL_PORT}:${WSGI_PORT}
    volumes:
        - ./src:/assignment/src
        - ./commands:/assignment/commands
#        - static_content:/test-assigment/src/static
#        - media_content:/test-assigment/src/media
    env_file:
        - .env
    depends_on:
      - elasticsearch
#      - postgres

  #  postgres:
  #    image: postgres:15
  #    ports:
  #      - 5432:5432
  #    volumes:
  #      - pg_data:/var/lib/postgresql/data
  #    env_file:
  #      - .env

  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
        - 9200:9200
    environment:
        - discovery.type=single-node
        - xpack.security.enabled=false

  redis:
    image: redis
    env_file:
      - .env
    restart: on-failure
    depends_on:
      - backend

  celery:
    build: ./
    command: celery -A config.celery_app.app worker -l info
    restart: always
    volumes:
      - ./src:/assignment/src
    env_file:
      - .env
    working_dir: /assignment/src
    depends_on:
      - redis
      - backend

  celerybeat:
    build: ./
    command: celery -A config.celery_app.app worker -l info -S django
    restart: always
    volumes:
      - ./src:/assignment/src
    env_file:
      - .env
    working_dir: /assignment/src
    depends_on:
      - redis
      - backend

  flower:
    build: ./
    command: celery -A config.celery_app.app flower --broker=redis://redis
    restart: always
    volumes:
      - ./src:/assignment/src
    env_file:
      - .env
    ports:
      - 5556:5555
    depends_on:
      - redis
      - celery

  redisadmin:
    image: redislabs/redisinsight
    container_name: redisadmin
    restart: on-failure
    ports:
      - 8001:8001
    env_file: .env

  grafana:
    container_name: grafana_container
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'

volumes:
  esdata1:
  grafana_data:
  prometheus_data: